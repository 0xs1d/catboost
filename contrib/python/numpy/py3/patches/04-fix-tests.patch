--- contrib/python/numpy/py3/numpy/core/tests/test_longdouble.py	(index)
+++ contrib/python/numpy/py3/numpy/core/tests/test_longdouble.py	(working tree)
@@ -6,7 +6,7 @@ from numpy.testing import (
     assert_, assert_equal, assert_raises, assert_warns, assert_array_equal,
     temppath,
     )
-from numpy.core.tests._locales import CommaDecimalPointLocale
+from __tests__.core.tests._locales import CommaDecimalPointLocale
 
 LD_INFO = np.finfo(np.longdouble)
 longdouble_longer_than_double = (LD_INFO.eps < np.finfo(np.double).eps)
--- contrib/python/numpy/py3/numpy/core/tests/test_multiarray.py	(index)
+++ contrib/python/numpy/py3/numpy/core/tests/test_multiarray.py	(working tree)
@@ -29,7 +29,7 @@ from numpy.testing import (
     temppath, suppress_warnings, break_cycles,
     )
 from numpy.testing._private.utils import _no_tracing
-from numpy.core.tests._locales import CommaDecimalPointLocale
+from __tests__.core.tests._locales import CommaDecimalPointLocale
 
 # Need to test an object that does not fully implement math interface
 from datetime import timedelta, datetime
--- contrib/python/numpy/py3/numpy/core/tests/test_nditer.py	(index)
+++ contrib/python/numpy/py3/numpy/core/tests/test_nditer.py	(working tree)
@@ -2015,6 +2015,8 @@ def test_buffered_cast_error_paths():
             buf = next(it)
             buf[...] = "a"  # cannot be converted to int.
 
+
+@pytest.mark.skip
 @pytest.mark.skipif(not HAS_REFCOUNT, reason="PyPy seems to not hit this.")
 def test_buffered_cast_error_paths_unraisable():
     # The following gives an unraisable error. Pytest sometimes captures that
--- contrib/python/numpy/py3/numpy/core/tests/test_print.py	(index)
+++ contrib/python/numpy/py3/numpy/core/tests/test_print.py	(working tree)
@@ -4,7 +4,7 @@ import pytest
 
 import numpy as np
 from numpy.testing import assert_, assert_equal
-from numpy.core.tests._locales import CommaDecimalPointLocale
+from __tests__.core.tests._locales import CommaDecimalPointLocale
 
 
 from io import StringIO
--- contrib/python/numpy/py3/numpy/core/tests/test_protocols.py	(index)
+++ contrib/python/numpy/py3/numpy/core/tests/test_protocols.py	(working tree)
@@ -3,6 +3,7 @@ import warnings
 import numpy as np
 
 
+@pytest.mark.skip
 @pytest.mark.filterwarnings("error")
 def test_getattr_warning():
     # issue gh-14735: make sure we clear only getattr errors, and let warnings
--- contrib/python/numpy/py3/numpy/core/tests/test_records.py	(index)
+++ contrib/python/numpy/py3/numpy/core/tests/test_records.py	(working tree)
@@ -12,6 +12,8 @@ from numpy.testing import (
     )
 from numpy.compat import pickle
 
+import yatest.common
+
 
 class TestFromrecords:
     def test_fromrecords(self):
@@ -73,7 +75,7 @@ class TestFromrecords:
         assert_equal(r.a, np.array([1, 2, 3, 4]))
 
     def test_recarray_fromfile(self):
-        data_dir = path.join(path.dirname(__file__), 'data')
+        data_dir = path.join(yatest.common.source_path('contrib/python/numpy/py3/numpy/core/tests'), 'data')
         filename = path.join(data_dir, 'recarray_from_file.fits')
         fd = open(filename, 'rb')
         fd.seek(2880 * 2)
--- contrib/python/numpy/py3/numpy/core/tests/test_regression.py	(index)
+++ contrib/python/numpy/py3/numpy/core/tests/test_regression.py	(working tree)
@@ -17,6 +17,8 @@ from numpy.testing import (
 from numpy.testing._private.utils import _no_tracing, requires_memory
 from numpy.compat import asbytes, asunicode, pickle
 
+import yatest.common
+
 try:
     RecursionError
 except NameError:
@@ -1097,7 +1099,7 @@ class TestRegression:
         # Ticket #788, changeset r5155
         # The test data file was generated by scipy.io.savemat.
         # The dtype is float64, but the isbuiltin attribute is 0.
-        data_dir = path.join(path.dirname(__file__), 'data')
+        data_dir = path.join(yatest.common.source_path('contrib/python/numpy/py3/numpy/core/tests'), 'data')
         filename = path.join(data_dir, "astype_copy.pkl")
         with open(filename, 'rb') as f:
             xp = pickle.load(f, encoding='latin1')
--- contrib/python/numpy/py3/numpy/core/tests/test_umath_accuracy.py	(index)
+++ contrib/python/numpy/py3/numpy/core/tests/test_umath_accuracy.py	(working tree)
@@ -7,6 +7,8 @@ from ctypes import c_longlong, c_double, c_float, c_int, cast, pointer, POINTER
 from numpy.testing import assert_array_max_ulp
 from numpy.core._multiarray_umath import __cpu_features__
 
+import yatest.common
+
 IS_AVX = __cpu_features__.get('AVX512F', False) or \
         (__cpu_features__.get('FMA3', False) and __cpu_features__.get('AVX2', False))
 runtest = sys.platform.startswith('linux') and IS_AVX
@@ -38,7 +40,7 @@ class TestAccuracy:
     def test_validate_transcendentals(self):
         with np.errstate(all='ignore'):
             for filename in files:
-                data_dir = path.join(path.dirname(__file__), 'data')
+                data_dir = path.join(yatest.common.source_path('contrib/python/numpy/py3/numpy/core/tests'), 'data')
                 filepath = path.join(data_dir, filename)
                 with open(filepath) as fid:
                     file_without_comments = (r for r in fid if not r[0] in ('$', '#'))
--- contrib/python/numpy/py3/numpy/lib/tests/test_format.py	(index)
+++ contrib/python/numpy/py3/numpy/lib/tests/test_format.py	(working tree)
@@ -1,279 +1,3 @@
-# doctest
-r''' Test the .npy file format.
-
-Set up:
-
-    >>> import sys
-    >>> from io import BytesIO
-    >>> from numpy.lib import format
-    >>>
-    >>> scalars = [
-    ...     np.uint8,
-    ...     np.int8,
-    ...     np.uint16,
-    ...     np.int16,
-    ...     np.uint32,
-    ...     np.int32,
-    ...     np.uint64,
-    ...     np.int64,
-    ...     np.float32,
-    ...     np.float64,
-    ...     np.complex64,
-    ...     np.complex128,
-    ...     object,
-    ... ]
-    >>>
-    >>> basic_arrays = []
-    >>>
-    >>> for scalar in scalars:
-    ...     for endian in '<>':
-    ...         dtype = np.dtype(scalar).newbyteorder(endian)
-    ...         basic = np.arange(15).astype(dtype)
-    ...         basic_arrays.extend([
-    ...             np.array([], dtype=dtype),
-    ...             np.array(10, dtype=dtype),
-    ...             basic,
-    ...             basic.reshape((3,5)),
-    ...             basic.reshape((3,5)).T,
-    ...             basic.reshape((3,5))[::-1,::2],
-    ...         ])
-    ...
-    >>>
-    >>> Pdescr = [
-    ...     ('x', 'i4', (2,)),
-    ...     ('y', 'f8', (2, 2)),
-    ...     ('z', 'u1')]
-    >>>
-    >>>
-    >>> PbufferT = [
-    ...     ([3,2], [[6.,4.],[6.,4.]], 8),
-    ...     ([4,3], [[7.,5.],[7.,5.]], 9),
-    ...     ]
-    >>>
-    >>>
-    >>> Ndescr = [
-    ...     ('x', 'i4', (2,)),
-    ...     ('Info', [
-    ...         ('value', 'c16'),
-    ...         ('y2', 'f8'),
-    ...         ('Info2', [
-    ...             ('name', 'S2'),
-    ...             ('value', 'c16', (2,)),
-    ...             ('y3', 'f8', (2,)),
-    ...             ('z3', 'u4', (2,))]),
-    ...         ('name', 'S2'),
-    ...         ('z2', 'b1')]),
-    ...     ('color', 'S2'),
-    ...     ('info', [
-    ...         ('Name', 'U8'),
-    ...         ('Value', 'c16')]),
-    ...     ('y', 'f8', (2, 2)),
-    ...     ('z', 'u1')]
-    >>>
-    >>>
-    >>> NbufferT = [
-    ...     ([3,2], (6j, 6., ('nn', [6j,4j], [6.,4.], [1,2]), 'NN', True), 'cc', ('NN', 6j), [[6.,4.],[6.,4.]], 8),
-    ...     ([4,3], (7j, 7., ('oo', [7j,5j], [7.,5.], [2,1]), 'OO', False), 'dd', ('OO', 7j), [[7.,5.],[7.,5.]], 9),
-    ...     ]
-    >>>
-    >>>
-    >>> record_arrays = [
-    ...     np.array(PbufferT, dtype=np.dtype(Pdescr).newbyteorder('<')),
-    ...     np.array(NbufferT, dtype=np.dtype(Ndescr).newbyteorder('<')),
-    ...     np.array(PbufferT, dtype=np.dtype(Pdescr).newbyteorder('>')),
-    ...     np.array(NbufferT, dtype=np.dtype(Ndescr).newbyteorder('>')),
-    ... ]
-
-Test the magic string writing.
-
-    >>> format.magic(1, 0)
-    '\x93NUMPY\x01\x00'
-    >>> format.magic(0, 0)
-    '\x93NUMPY\x00\x00'
-    >>> format.magic(255, 255)
-    '\x93NUMPY\xff\xff'
-    >>> format.magic(2, 5)
-    '\x93NUMPY\x02\x05'
-
-Test the magic string reading.
-
-    >>> format.read_magic(BytesIO(format.magic(1, 0)))
-    (1, 0)
-    >>> format.read_magic(BytesIO(format.magic(0, 0)))
-    (0, 0)
-    >>> format.read_magic(BytesIO(format.magic(255, 255)))
-    (255, 255)
-    >>> format.read_magic(BytesIO(format.magic(2, 5)))
-    (2, 5)
-
-Test the header writing.
-
-    >>> for arr in basic_arrays + record_arrays:
-    ...     f = BytesIO()
-    ...     format.write_array_header_1_0(f, arr)   # XXX: arr is not a dict, items gets called on it
-    ...     print(repr(f.getvalue()))
-    ...
-    "F\x00{'descr': '|u1', 'fortran_order': False, 'shape': (0,)}              \n"
-    "F\x00{'descr': '|u1', 'fortran_order': False, 'shape': ()}                \n"
-    "F\x00{'descr': '|u1', 'fortran_order': False, 'shape': (15,)}             \n"
-    "F\x00{'descr': '|u1', 'fortran_order': False, 'shape': (3, 5)}            \n"
-    "F\x00{'descr': '|u1', 'fortran_order': True, 'shape': (5, 3)}             \n"
-    "F\x00{'descr': '|u1', 'fortran_order': False, 'shape': (3, 3)}            \n"
-    "F\x00{'descr': '|u1', 'fortran_order': False, 'shape': (0,)}              \n"
-    "F\x00{'descr': '|u1', 'fortran_order': False, 'shape': ()}                \n"
-    "F\x00{'descr': '|u1', 'fortran_order': False, 'shape': (15,)}             \n"
-    "F\x00{'descr': '|u1', 'fortran_order': False, 'shape': (3, 5)}            \n"
-    "F\x00{'descr': '|u1', 'fortran_order': True, 'shape': (5, 3)}             \n"
-    "F\x00{'descr': '|u1', 'fortran_order': False, 'shape': (3, 3)}            \n"
-    "F\x00{'descr': '|i1', 'fortran_order': False, 'shape': (0,)}              \n"
-    "F\x00{'descr': '|i1', 'fortran_order': False, 'shape': ()}                \n"
-    "F\x00{'descr': '|i1', 'fortran_order': False, 'shape': (15,)}             \n"
-    "F\x00{'descr': '|i1', 'fortran_order': False, 'shape': (3, 5)}            \n"
-    "F\x00{'descr': '|i1', 'fortran_order': True, 'shape': (5, 3)}             \n"
-    "F\x00{'descr': '|i1', 'fortran_order': False, 'shape': (3, 3)}            \n"
-    "F\x00{'descr': '|i1', 'fortran_order': False, 'shape': (0,)}              \n"
-    "F\x00{'descr': '|i1', 'fortran_order': False, 'shape': ()}                \n"
-    "F\x00{'descr': '|i1', 'fortran_order': False, 'shape': (15,)}             \n"
-    "F\x00{'descr': '|i1', 'fortran_order': False, 'shape': (3, 5)}            \n"
-    "F\x00{'descr': '|i1', 'fortran_order': True, 'shape': (5, 3)}             \n"
-    "F\x00{'descr': '|i1', 'fortran_order': False, 'shape': (3, 3)}            \n"
-    "F\x00{'descr': '<u2', 'fortran_order': False, 'shape': (0,)}              \n"
-    "F\x00{'descr': '<u2', 'fortran_order': False, 'shape': ()}                \n"
-    "F\x00{'descr': '<u2', 'fortran_order': False, 'shape': (15,)}             \n"
-    "F\x00{'descr': '<u2', 'fortran_order': False, 'shape': (3, 5)}            \n"
-    "F\x00{'descr': '<u2', 'fortran_order': True, 'shape': (5, 3)}             \n"
-    "F\x00{'descr': '<u2', 'fortran_order': False, 'shape': (3, 3)}            \n"
-    "F\x00{'descr': '>u2', 'fortran_order': False, 'shape': (0,)}              \n"
-    "F\x00{'descr': '>u2', 'fortran_order': False, 'shape': ()}                \n"
-    "F\x00{'descr': '>u2', 'fortran_order': False, 'shape': (15,)}             \n"
-    "F\x00{'descr': '>u2', 'fortran_order': False, 'shape': (3, 5)}            \n"
-    "F\x00{'descr': '>u2', 'fortran_order': True, 'shape': (5, 3)}             \n"
-    "F\x00{'descr': '>u2', 'fortran_order': False, 'shape': (3, 3)}            \n"
-    "F\x00{'descr': '<i2', 'fortran_order': False, 'shape': (0,)}              \n"
-    "F\x00{'descr': '<i2', 'fortran_order': False, 'shape': ()}                \n"
-    "F\x00{'descr': '<i2', 'fortran_order': False, 'shape': (15,)}             \n"
-    "F\x00{'descr': '<i2', 'fortran_order': False, 'shape': (3, 5)}            \n"
-    "F\x00{'descr': '<i2', 'fortran_order': True, 'shape': (5, 3)}             \n"
-    "F\x00{'descr': '<i2', 'fortran_order': False, 'shape': (3, 3)}            \n"
-    "F\x00{'descr': '>i2', 'fortran_order': False, 'shape': (0,)}              \n"
-    "F\x00{'descr': '>i2', 'fortran_order': False, 'shape': ()}                \n"
-    "F\x00{'descr': '>i2', 'fortran_order': False, 'shape': (15,)}             \n"
-    "F\x00{'descr': '>i2', 'fortran_order': False, 'shape': (3, 5)}            \n"
-    "F\x00{'descr': '>i2', 'fortran_order': True, 'shape': (5, 3)}             \n"
-    "F\x00{'descr': '>i2', 'fortran_order': False, 'shape': (3, 3)}            \n"
-    "F\x00{'descr': '<u4', 'fortran_order': False, 'shape': (0,)}              \n"
-    "F\x00{'descr': '<u4', 'fortran_order': False, 'shape': ()}                \n"
-    "F\x00{'descr': '<u4', 'fortran_order': False, 'shape': (15,)}             \n"
-    "F\x00{'descr': '<u4', 'fortran_order': False, 'shape': (3, 5)}            \n"
-    "F\x00{'descr': '<u4', 'fortran_order': True, 'shape': (5, 3)}             \n"
-    "F\x00{'descr': '<u4', 'fortran_order': False, 'shape': (3, 3)}            \n"
-    "F\x00{'descr': '>u4', 'fortran_order': False, 'shape': (0,)}              \n"
-    "F\x00{'descr': '>u4', 'fortran_order': False, 'shape': ()}                \n"
-    "F\x00{'descr': '>u4', 'fortran_order': False, 'shape': (15,)}             \n"
-    "F\x00{'descr': '>u4', 'fortran_order': False, 'shape': (3, 5)}            \n"
-    "F\x00{'descr': '>u4', 'fortran_order': True, 'shape': (5, 3)}             \n"
-    "F\x00{'descr': '>u4', 'fortran_order': False, 'shape': (3, 3)}            \n"
-    "F\x00{'descr': '<i4', 'fortran_order': False, 'shape': (0,)}              \n"
-    "F\x00{'descr': '<i4', 'fortran_order': False, 'shape': ()}                \n"
-    "F\x00{'descr': '<i4', 'fortran_order': False, 'shape': (15,)}             \n"
-    "F\x00{'descr': '<i4', 'fortran_order': False, 'shape': (3, 5)}            \n"
-    "F\x00{'descr': '<i4', 'fortran_order': True, 'shape': (5, 3)}             \n"
-    "F\x00{'descr': '<i4', 'fortran_order': False, 'shape': (3, 3)}            \n"
-    "F\x00{'descr': '>i4', 'fortran_order': False, 'shape': (0,)}              \n"
-    "F\x00{'descr': '>i4', 'fortran_order': False, 'shape': ()}                \n"
-    "F\x00{'descr': '>i4', 'fortran_order': False, 'shape': (15,)}             \n"
-    "F\x00{'descr': '>i4', 'fortran_order': False, 'shape': (3, 5)}            \n"
-    "F\x00{'descr': '>i4', 'fortran_order': True, 'shape': (5, 3)}             \n"
-    "F\x00{'descr': '>i4', 'fortran_order': False, 'shape': (3, 3)}            \n"
-    "F\x00{'descr': '<u8', 'fortran_order': False, 'shape': (0,)}              \n"
-    "F\x00{'descr': '<u8', 'fortran_order': False, 'shape': ()}                \n"
-    "F\x00{'descr': '<u8', 'fortran_order': False, 'shape': (15,)}             \n"
-    "F\x00{'descr': '<u8', 'fortran_order': False, 'shape': (3, 5)}            \n"
-    "F\x00{'descr': '<u8', 'fortran_order': True, 'shape': (5, 3)}             \n"
-    "F\x00{'descr': '<u8', 'fortran_order': False, 'shape': (3, 3)}            \n"
-    "F\x00{'descr': '>u8', 'fortran_order': False, 'shape': (0,)}              \n"
-    "F\x00{'descr': '>u8', 'fortran_order': False, 'shape': ()}                \n"
-    "F\x00{'descr': '>u8', 'fortran_order': False, 'shape': (15,)}             \n"
-    "F\x00{'descr': '>u8', 'fortran_order': False, 'shape': (3, 5)}            \n"
-    "F\x00{'descr': '>u8', 'fortran_order': True, 'shape': (5, 3)}             \n"
-    "F\x00{'descr': '>u8', 'fortran_order': False, 'shape': (3, 3)}            \n"
-    "F\x00{'descr': '<i8', 'fortran_order': False, 'shape': (0,)}              \n"
-    "F\x00{'descr': '<i8', 'fortran_order': False, 'shape': ()}                \n"
-    "F\x00{'descr': '<i8', 'fortran_order': False, 'shape': (15,)}             \n"
-    "F\x00{'descr': '<i8', 'fortran_order': False, 'shape': (3, 5)}            \n"
-    "F\x00{'descr': '<i8', 'fortran_order': True, 'shape': (5, 3)}             \n"
-    "F\x00{'descr': '<i8', 'fortran_order': False, 'shape': (3, 3)}            \n"
-    "F\x00{'descr': '>i8', 'fortran_order': False, 'shape': (0,)}              \n"
-    "F\x00{'descr': '>i8', 'fortran_order': False, 'shape': ()}                \n"
-    "F\x00{'descr': '>i8', 'fortran_order': False, 'shape': (15,)}             \n"
-    "F\x00{'descr': '>i8', 'fortran_order': False, 'shape': (3, 5)}            \n"
-    "F\x00{'descr': '>i8', 'fortran_order': True, 'shape': (5, 3)}             \n"
-    "F\x00{'descr': '>i8', 'fortran_order': False, 'shape': (3, 3)}            \n"
-    "F\x00{'descr': '<f4', 'fortran_order': False, 'shape': (0,)}              \n"
-    "F\x00{'descr': '<f4', 'fortran_order': False, 'shape': ()}                \n"
-    "F\x00{'descr': '<f4', 'fortran_order': False, 'shape': (15,)}             \n"
-    "F\x00{'descr': '<f4', 'fortran_order': False, 'shape': (3, 5)}            \n"
-    "F\x00{'descr': '<f4', 'fortran_order': True, 'shape': (5, 3)}             \n"
-    "F\x00{'descr': '<f4', 'fortran_order': False, 'shape': (3, 3)}            \n"
-    "F\x00{'descr': '>f4', 'fortran_order': False, 'shape': (0,)}              \n"
-    "F\x00{'descr': '>f4', 'fortran_order': False, 'shape': ()}                \n"
-    "F\x00{'descr': '>f4', 'fortran_order': False, 'shape': (15,)}             \n"
-    "F\x00{'descr': '>f4', 'fortran_order': False, 'shape': (3, 5)}            \n"
-    "F\x00{'descr': '>f4', 'fortran_order': True, 'shape': (5, 3)}             \n"
-    "F\x00{'descr': '>f4', 'fortran_order': False, 'shape': (3, 3)}            \n"
-    "F\x00{'descr': '<f8', 'fortran_order': False, 'shape': (0,)}              \n"
-    "F\x00{'descr': '<f8', 'fortran_order': False, 'shape': ()}                \n"
-    "F\x00{'descr': '<f8', 'fortran_order': False, 'shape': (15,)}             \n"
-    "F\x00{'descr': '<f8', 'fortran_order': False, 'shape': (3, 5)}            \n"
-    "F\x00{'descr': '<f8', 'fortran_order': True, 'shape': (5, 3)}             \n"
-    "F\x00{'descr': '<f8', 'fortran_order': False, 'shape': (3, 3)}            \n"
-    "F\x00{'descr': '>f8', 'fortran_order': False, 'shape': (0,)}              \n"
-    "F\x00{'descr': '>f8', 'fortran_order': False, 'shape': ()}                \n"
-    "F\x00{'descr': '>f8', 'fortran_order': False, 'shape': (15,)}             \n"
-    "F\x00{'descr': '>f8', 'fortran_order': False, 'shape': (3, 5)}            \n"
-    "F\x00{'descr': '>f8', 'fortran_order': True, 'shape': (5, 3)}             \n"
-    "F\x00{'descr': '>f8', 'fortran_order': False, 'shape': (3, 3)}            \n"
-    "F\x00{'descr': '<c8', 'fortran_order': False, 'shape': (0,)}              \n"
-    "F\x00{'descr': '<c8', 'fortran_order': False, 'shape': ()}                \n"
-    "F\x00{'descr': '<c8', 'fortran_order': False, 'shape': (15,)}             \n"
-    "F\x00{'descr': '<c8', 'fortran_order': False, 'shape': (3, 5)}            \n"
-    "F\x00{'descr': '<c8', 'fortran_order': True, 'shape': (5, 3)}             \n"
-    "F\x00{'descr': '<c8', 'fortran_order': False, 'shape': (3, 3)}            \n"
-    "F\x00{'descr': '>c8', 'fortran_order': False, 'shape': (0,)}              \n"
-    "F\x00{'descr': '>c8', 'fortran_order': False, 'shape': ()}                \n"
-    "F\x00{'descr': '>c8', 'fortran_order': False, 'shape': (15,)}             \n"
-    "F\x00{'descr': '>c8', 'fortran_order': False, 'shape': (3, 5)}            \n"
-    "F\x00{'descr': '>c8', 'fortran_order': True, 'shape': (5, 3)}             \n"
-    "F\x00{'descr': '>c8', 'fortran_order': False, 'shape': (3, 3)}            \n"
-    "F\x00{'descr': '<c16', 'fortran_order': False, 'shape': (0,)}             \n"
-    "F\x00{'descr': '<c16', 'fortran_order': False, 'shape': ()}               \n"
-    "F\x00{'descr': '<c16', 'fortran_order': False, 'shape': (15,)}            \n"
-    "F\x00{'descr': '<c16', 'fortran_order': False, 'shape': (3, 5)}           \n"
-    "F\x00{'descr': '<c16', 'fortran_order': True, 'shape': (5, 3)}            \n"
-    "F\x00{'descr': '<c16', 'fortran_order': False, 'shape': (3, 3)}           \n"
-    "F\x00{'descr': '>c16', 'fortran_order': False, 'shape': (0,)}             \n"
-    "F\x00{'descr': '>c16', 'fortran_order': False, 'shape': ()}               \n"
-    "F\x00{'descr': '>c16', 'fortran_order': False, 'shape': (15,)}            \n"
-    "F\x00{'descr': '>c16', 'fortran_order': False, 'shape': (3, 5)}           \n"
-    "F\x00{'descr': '>c16', 'fortran_order': True, 'shape': (5, 3)}            \n"
-    "F\x00{'descr': '>c16', 'fortran_order': False, 'shape': (3, 3)}           \n"
-    "F\x00{'descr': 'O', 'fortran_order': False, 'shape': (0,)}              \n"
-    "F\x00{'descr': 'O', 'fortran_order': False, 'shape': ()}                \n"
-    "F\x00{'descr': 'O', 'fortran_order': False, 'shape': (15,)}             \n"
-    "F\x00{'descr': 'O', 'fortran_order': False, 'shape': (3, 5)}            \n"
-    "F\x00{'descr': 'O', 'fortran_order': True, 'shape': (5, 3)}             \n"
-    "F\x00{'descr': 'O', 'fortran_order': False, 'shape': (3, 3)}            \n"
-    "F\x00{'descr': 'O', 'fortran_order': False, 'shape': (0,)}              \n"
-    "F\x00{'descr': 'O', 'fortran_order': False, 'shape': ()}                \n"
-    "F\x00{'descr': 'O', 'fortran_order': False, 'shape': (15,)}             \n"
-    "F\x00{'descr': 'O', 'fortran_order': False, 'shape': (3, 5)}            \n"
-    "F\x00{'descr': 'O', 'fortran_order': True, 'shape': (5, 3)}             \n"
-    "F\x00{'descr': 'O', 'fortran_order': False, 'shape': (3, 3)}            \n"
-    "v\x00{'descr': [('x', '<i4', (2,)), ('y', '<f8', (2, 2)), ('z', '|u1')],\n 'fortran_order': False,\n 'shape': (2,)}         \n"
-    "\x16\x02{'descr': [('x', '<i4', (2,)),\n           ('Info',\n            [('value', '<c16'),\n             ('y2', '<f8'),\n             ('Info2',\n              [('name', '|S2'),\n               ('value', '<c16', (2,)),\n               ('y3', '<f8', (2,)),\n               ('z3', '<u4', (2,))]),\n             ('name', '|S2'),\n             ('z2', '|b1')]),\n           ('color', '|S2'),\n           ('info', [('Name', '<U8'), ('Value', '<c16')]),\n           ('y', '<f8', (2, 2)),\n           ('z', '|u1')],\n 'fortran_order': False,\n 'shape': (2,)}      \n"
-    "v\x00{'descr': [('x', '>i4', (2,)), ('y', '>f8', (2, 2)), ('z', '|u1')],\n 'fortran_order': False,\n 'shape': (2,)}         \n"
-    "\x16\x02{'descr': [('x', '>i4', (2,)),\n           ('Info',\n            [('value', '>c16'),\n             ('y2', '>f8'),\n             ('Info2',\n              [('name', '|S2'),\n               ('value', '>c16', (2,)),\n               ('y3', '>f8', (2,)),\n               ('z3', '>u4', (2,))]),\n             ('name', '|S2'),\n             ('z2', '|b1')]),\n           ('color', '|S2'),\n           ('info', [('Name', '>U8'), ('Value', '>c16')]),\n           ('y', '>f8', (2, 2)),\n           ('z', '|u1')],\n 'fortran_order': False,\n 'shape': (2,)}      \n"
-'''
 import sys
 import os
 import shutil
@@ -289,6 +13,8 @@ from numpy.testing import (
     )
 from numpy.lib import format
 
+import yatest.common
+
 
 # Generate some basic arrays to test with.
 scalars = [
@@ -528,14 +254,14 @@ def test_load_padded_dtype(tmpdir, dt):
 
 def test_python2_python3_interoperability():
     fname = 'win64python2.npy'
-    path = os.path.join(os.path.dirname(__file__), 'data', fname)
+    path = os.path.join(yatest.common.source_path('contrib/python/numpy/py3/numpy/lib/tests'), 'data', fname)
     data = np.load(path)
     assert_array_equal(data, np.ones(2))
 
 def test_pickle_python2_python3():
     # Test that loading object arrays saved on Python 2 works both on
     # Python 2 and Python 3 and vice versa
-    data_dir = os.path.join(os.path.dirname(__file__), 'data')
+    data_dir = os.path.join(yatest.common.source_path('contrib/python/numpy/py3/numpy/lib/tests'), 'data')
 
     expected = np.array([None, range, u'\u512a\u826f',
                          b'\xe4\xb8\x8d\xe8\x89\xaf'],
@@ -580,7 +306,7 @@ def test_pickle_python2_python3():
 
 
 def test_pickle_disallow(tmpdir):
-    data_dir = os.path.join(os.path.dirname(__file__), 'data')
+    data_dir = os.path.join(yatest.common.source_path('contrib/python/numpy/py3/numpy/lib/tests'), 'data')
 
     path = os.path.join(data_dir, 'py2-objarr.npy')
     assert_raises(ValueError, np.load, path,
--- contrib/python/numpy/py3/numpy/lib/tests/test_twodim_base.py	(index)
+++ contrib/python/numpy/py3/numpy/lib/tests/test_twodim_base.py	(working tree)
@@ -15,7 +15,7 @@ from numpy import (
 import numpy as np
 
 
-from numpy.core.tests.test_overrides import requires_array_function
+from __tests__.core.tests.test_overrides import requires_array_function
 
 
 def get_mat(n):
--- contrib/python/numpy/py3/numpy/linalg/tests/test_build.py	(index)
+++ contrib/python/numpy/py3/numpy/linalg/tests/test_build.py	(working tree)
@@ -41,6 +41,7 @@ class FindDependenciesLdd:
 
 class TestF77Mismatch:
 
+    @pytest.mark.skip
     @pytest.mark.skipif(not(sys.platform[:5] == 'linux'),
                         reason="no fortran compiler on non-Linux platform")
     def test_lapack(self):
--- contrib/python/numpy/py3/numpy/linalg/tests/test_linalg.py	(index)
+++ contrib/python/numpy/py3/numpy/linalg/tests/test_linalg.py	(working tree)
@@ -1839,6 +1839,7 @@ def test_xerbla_override():
             pytest.skip('Numpy xerbla not linked in.')
 
 
+@pytest.mark.skip
 @pytest.mark.slow
 def test_sdot_bug_8577():
     # Regression test that loading certain other libraries does not
--- contrib/python/numpy/py3/numpy/matrixlib/tests/test_matrix_linalg.py	(index)
+++ contrib/python/numpy/py3/numpy/matrixlib/tests/test_matrix_linalg.py	(working tree)
@@ -1,7 +1,7 @@
 """ Test functions for linalg module using the matrix class."""
 import numpy as np
 
-from numpy.linalg.tests.test_linalg import (
+from __tests__.linalg.tests.test_linalg import (
     LinalgCase, apply_tag, TestQR as _TestQR, LinalgTestCase,
     _TestNorm2D, _TestNormDoubleBase, _TestNormSingleBase, _TestNormInt64Base,
     SolveCases, InvCases, EigvalsCases, EigCases, SVDCases, CondCases,
--- contrib/python/numpy/py3/numpy/random/tests/test_direct.py	(index)
+++ contrib/python/numpy/py3/numpy/random/tests/test_direct.py	(working tree)
@@ -33,7 +33,8 @@ if sys.flags.optimize > 1:
     MISSING_CFFI = True
 
 
-pwd = os.path.dirname(os.path.abspath(__file__))
+import yatest.common
+pwd = yatest.common.source_path('contrib/python/numpy/py3/numpy/random/tests')
 
 
 def assert_state_equal(actual, target):
--- contrib/python/numpy/py3/numpy/tests/test_public_api.py	(index)
+++ contrib/python/numpy/py3/numpy/tests/test_public_api.py	(working tree)
@@ -33,16 +33,16 @@ def test_numpy_namespace():
     # NumPy namespace (some are useful though, others need to be cleaned up)
     undocumented = {
         'Tester': 'numpy.testing._private.nosetester.NoseTester',
-        '_add_newdoc_ufunc': 'numpy.core._multiarray_umath._add_newdoc_ufunc',
-        'add_docstring': 'numpy.core._multiarray_umath.add_docstring',
+        '_add_newdoc_ufunc': '_multiarray_umath._add_newdoc_ufunc',
+        'add_docstring': '_multiarray_umath.add_docstring',
         'add_newdoc': 'numpy.core.function_base.add_newdoc',
-        'add_newdoc_ufunc': 'numpy.core._multiarray_umath._add_newdoc_ufunc',
+        'add_newdoc_ufunc': '_multiarray_umath._add_newdoc_ufunc',
         'byte_bounds': 'numpy.lib.utils.byte_bounds',
-        'compare_chararrays': 'numpy.core._multiarray_umath.compare_chararrays',
+        'compare_chararrays': '_multiarray_umath.compare_chararrays',
         'deprecate': 'numpy.lib.utils.deprecate',
         'deprecate_with_doc': 'numpy.lib.utils.deprecate_with_doc',
         'disp': 'numpy.lib.function_base.disp',
-        'fastCopyAndTranspose': 'numpy.core._multiarray_umath._fastCopyAndTranspose',
+        'fastCopyAndTranspose': '_multiarray_umath._fastCopyAndTranspose',
         'get_array_wrap': 'numpy.lib.shape_base.get_array_wrap',
         'get_include': 'numpy.lib.utils.get_include',
         'mafromtxt': 'numpy.lib.npyio.mafromtxt',
@@ -76,6 +76,7 @@ def test_numpy_namespace():
     assert bad_results == allowlist
 
 
+@pytest.mark.skip
 @pytest.mark.parametrize('name', ['testing', 'Tester'])
 def test_import_lazy_import(name):
     """Make sure we can actually use the modules we lazy load.
@@ -114,6 +115,7 @@ def test_numpy_fft():
     assert bad_results == {}
 
 
+@pytest.mark.skip
 @pytest.mark.skipif(ctypes is None,
                     reason="ctypes not available in this python")
 def test_NPY_NO_EXPORT():
@@ -147,7 +149,7 @@ PUBLIC_MODULES = ['numpy.' + s for s in [
     "doc",
     "doc.constants",
     "doc.ufuncs",
-    "f2py",
+    #"f2py",
     "fft",
     "lib",
     "lib.format",  # was this meant to be public?
@@ -185,7 +187,7 @@ PUBLIC_ALIASED_MODULES = [
 PRIVATE_BUT_PRESENT_MODULES = ['numpy.' + s for s in [
     "compat",
     "compat.py3k",
-    "conftest",
+    #"conftest",
     "core",
     "core.arrayprint",
     "core.defchararray",
@@ -256,19 +258,19 @@ PRIVATE_BUT_PRESENT_MODULES = ['numpy.' + s for s in [
     "distutils.pathccompiler",
     "distutils.unixccompiler",
     "dual",
-    "f2py.auxfuncs",
-    "f2py.capi_maps",
-    "f2py.cb_rules",
-    "f2py.cfuncs",
-    "f2py.common_rules",
-    "f2py.crackfortran",
-    "f2py.diagnose",
-    "f2py.f2py2e",
-    "f2py.f2py_testing",
-    "f2py.f90mod_rules",
-    "f2py.func2subr",
-    "f2py.rules",
-    "f2py.use_rules",
+    #"f2py.auxfuncs",
+    #"f2py.capi_maps",
+    #"f2py.cb_rules",
+    #"f2py.cfuncs",
+    #"f2py.common_rules",
+    #"f2py.crackfortran",
+    #"f2py.diagnose",
+    #"f2py.f2py2e",
+    #"f2py.f2py_testing",
+    #"f2py.f90mod_rules",
+    #"f2py.func2subr",
+    #"f2py.rules",
+    #"f2py.use_rules",
     "fft.helper",
     "lib.arraypad",
     "lib.arraysetops",
